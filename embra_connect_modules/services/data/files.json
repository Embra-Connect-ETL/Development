{
    "workspace_Embra-Connect-ETL": {
        "SAMPLE_DBT_PROJECT": {
            "deployment.yml": {
                "name": "deployment.yml",
                "content": "jobs:\n# Give each job a unique name. The name will be displayed in the Fivetran dashboard once your jobs are imported.\n# Job names must be unique.\n - name: daily\n   targetName: dev # The name of the target that will be used when running the job. If it's not specified, the target will be named 'prod'.\n   schedule: 0 12 * * * # Define when this job should run, using cron format. This example will run every day at 12:00pm (according to your warehouse timezone). For help with cron formatting, visit https://crontab.guru/.\n   # Optional timeout that limits the maximum run time of the job. You can specify only hours, only minutes or both, for example \"6h\", \"2h30m\", \"30m\"\n   # The value can be in range from 30 minutes to 24 hours.\n   # If timeout is not specified, the job will be terminated after 24 hours.\n   timeout: 2h30m\n   steps:\n     - name: run models # Give each step in your job a name. This will enable you to track the steps in the logs.\n       command: dbt run # Enter the dbt command that should run in this step. This example will run all your models. For a list of available commands visit https://docs.getdbt.com/reference/model-selection-syntax/.\n     - name: test models\n       command: dbt test # This example will run all your tests.\n\n - name: nightly\n   schedule: 0 0 * * * # This example will run every day at midnight.\n   steps:\n     - name: run models\n       command: dbt run --models my_first_model my_second_model # This example will run two specific models.\n\n - name: weekdays\n   schedule: 30 7 * * 1-5 # The example will run every weekday at 7:30am.\n   steps:\n     - name: run models\n       command: dbt run\n\n - name: every30minutes\n   schedule: '*/30 * * * *' # The example will run every 30 minutes. Note that the cron string is quoted as otherwise it will be treated as invalid alias node (see https://yaml.org/spec/1.2/spec.html#*%20alias// for details)\n   steps:\n     - name: version\n       command: dbt --version\n",
                "binary": false
            },
            "seeds": {
                "raw_customers.csv": {
                    "name": "raw_customers.csv",
                    "content": "id,first_name,last_name\n1,Michael,P.\n2,Shawn,M.\n3,Kathleen,P.\n4,Jimmy,C.\n5,Katherine,R.\n6,Sarah,R.\n7,Martin,M.\n8,Frank,R.\n9,Jennifer,F.\n10,Henry,W.\n11,Fred,S.\n12,Amy,D.\n13,Kathleen,M.\n14,Steve,F.\n15,Teresa,H.\n16,Amanda,H.\n17,Kimberly,R.\n18,Johnny,K.\n19,Virginia,F.\n20,Anna,A.\n21,Willie,H.\n22,Sean,H.\n23,Mildred,A.\n24,David,G.\n25,Victor,H.\n26,Aaron,R.\n27,Benjamin,B.\n28,Lisa,W.\n29,Benjamin,K.\n30,Christina,W.\n31,Jane,G.\n32,Thomas,O.\n33,Katherine,M.\n34,Jennifer,S.\n35,Sara,T.\n36,Harold,O.\n37,Shirley,J.\n38,Dennis,J.\n39,Louise,W.\n40,Maria,A.\n41,Gloria,C.\n42,Diana,S.\n43,Kelly,N.\n44,Jane,R.\n45,Scott,B.\n46,Norma,C.\n47,Marie,P.\n48,Lillian,C.\n49,Judy,N.\n50,Billy,L.\n51,Howard,R.\n52,Laura,F.\n53,Anne,B.\n54,Rose,M.\n55,Nicholas,R.\n56,Joshua,K.\n57,Paul,W.\n58,Kathryn,K.\n59,Adam,A.\n60,Norma,W.\n61,Timothy,R.\n62,Elizabeth,P.\n63,Edward,G.\n64,David,C.\n65,Brenda,W.\n66,Adam,W.\n67,Michael,H.\n68,Jesse,E.\n69,Janet,P.\n70,Helen,F.\n71,Gerald,C.\n72,Kathryn,O.\n73,Alan,B.\n74,Harry,A.\n75,Andrea,H.\n76,Barbara,W.\n77,Anne,W.\n78,Harry,H.\n79,Jack,R.\n80,Phillip,H.\n81,Shirley,H.\n82,Arthur,D.\n83,Virginia,R.\n84,Christina,R.\n85,Theresa,M.\n86,Jason,C.\n87,Phillip,B.\n88,Adam,T.\n89,Margaret,J.\n90,Paul,P.\n91,Todd,W.\n92,Willie,O.\n93,Frances,R.\n94,Gregory,H.\n95,Lisa,P.\n96,Jacqueline,A.\n97,Shirley,D.\n98,Nicole,M.\n99,Mary,G.\n100,Jean,M.\n",
                    "binary": false
                },
                "raw_payments.csv": {
                    "name": "raw_payments.csv",
                    "content": "id,order_id,payment_method,amount\n1,1,credit_card,1000\n2,2,credit_card,2000\n3,3,coupon,100\n4,4,coupon,2500\n5,5,bank_transfer,1700\n6,6,credit_card,600\n7,7,credit_card,1600\n8,8,credit_card,2300\n9,9,gift_card,2300\n10,9,bank_transfer,0\n11,10,bank_transfer,2600\n12,11,credit_card,2700\n13,12,credit_card,100\n14,13,credit_card,500\n15,13,bank_transfer,1400\n16,14,bank_transfer,300\n17,15,coupon,2200\n18,16,credit_card,1000\n19,17,bank_transfer,200\n20,18,credit_card,500\n21,18,credit_card,800\n22,19,gift_card,600\n23,20,bank_transfer,1500\n24,21,credit_card,1200\n25,22,bank_transfer,800\n26,23,gift_card,2300\n27,24,coupon,2600\n28,25,bank_transfer,2000\n29,25,credit_card,2200\n30,25,coupon,1600\n31,26,credit_card,3000\n32,27,credit_card,2300\n33,28,bank_transfer,1900\n34,29,bank_transfer,1200\n35,30,credit_card,1300\n36,31,credit_card,1200\n37,32,credit_card,300\n38,33,credit_card,2200\n39,34,bank_transfer,1500\n40,35,credit_card,2900\n41,36,bank_transfer,900\n42,37,credit_card,2300\n43,38,credit_card,1500\n44,39,bank_transfer,800\n45,40,credit_card,1400\n46,41,credit_card,1700\n47,42,coupon,1700\n48,43,gift_card,1800\n49,44,gift_card,1100\n50,45,bank_transfer,500\n51,46,bank_transfer,800\n52,47,credit_card,2200\n53,48,bank_transfer,300\n54,49,credit_card,600\n55,49,credit_card,900\n56,50,credit_card,2600\n57,51,credit_card,2900\n58,51,credit_card,100\n59,52,bank_transfer,1500\n60,53,credit_card,300\n61,54,credit_card,1800\n62,54,bank_transfer,1100\n63,55,credit_card,2900\n64,56,credit_card,400\n65,57,bank_transfer,200\n66,58,coupon,1800\n67,58,gift_card,600\n68,59,gift_card,2800\n69,60,credit_card,400\n70,61,bank_transfer,1600\n71,62,gift_card,1400\n72,63,credit_card,2900\n73,64,bank_transfer,2600\n74,65,credit_card,0\n75,66,credit_card,2800\n76,67,bank_transfer,400\n77,67,credit_card,1900\n78,68,credit_card,1600\n79,69,credit_card,1900\n80,70,credit_card,2600\n81,71,credit_card,500\n82,72,credit_card,2900\n83,73,bank_transfer,300\n84,74,credit_card,3000\n85,75,credit_card,1900\n86,76,coupon,200\n87,77,credit_card,0\n88,77,bank_transfer,1900\n89,78,bank_transfer,2600\n90,79,credit_card,1800\n91,79,credit_card,900\n92,80,gift_card,300\n93,81,coupon,200\n94,82,credit_card,800\n95,83,credit_card,100\n96,84,bank_transfer,2500\n97,85,bank_transfer,1700\n98,86,coupon,2300\n99,87,gift_card,3000\n100,87,credit_card,2600\n101,88,credit_card,2900\n102,89,bank_transfer,2200\n103,90,bank_transfer,200\n104,91,credit_card,1900\n105,92,bank_transfer,1500\n106,92,coupon,200\n107,93,gift_card,2600\n108,94,coupon,700\n109,95,coupon,2400\n110,96,gift_card,1700\n111,97,bank_transfer,1400\n112,98,bank_transfer,1000\n113,99,credit_card,2400\n",
                    "binary": false
                },
                "raw_orders.csv": {
                    "name": "raw_orders.csv",
                    "content": "id,user_id,order_date,status\r\n1,1,2018-01-01,returned\r\n2,3,2018-01-02,completed\r\n3,94,2018-01-04,completed\r\n4,50,2018-01-05,completed\r\n5,64,2018-01-05,completed\r\n6,54,2018-01-07,completed\r\n7,88,2018-01-09,completed\r\n8,2,2018-01-11,returned\r\n9,53,2018-01-12,completed\r\n10,7,2018-01-14,completed\r\n11,99,2018-01-14,completed\r\n12,59,2018-01-15,completed\r\n13,84,2018-01-17,completed\r\n14,40,2018-01-17,returned\r\n15,25,2018-01-17,completed\r\n16,39,2018-01-18,completed\r\n17,71,2018-01-18,completed\r\n18,64,2018-01-20,returned\r\n19,54,2018-01-22,completed\r\n20,20,2018-01-23,completed\r\n21,71,2018-01-23,completed\r\n22,86,2018-01-24,completed\r\n23,22,2018-01-26,return_pending\r\n24,3,2018-01-27,completed\r\n25,51,2018-01-28,completed\r\n26,32,2018-01-28,completed\r\n27,94,2018-01-29,completed\r\n28,8,2018-01-29,completed\r\n29,57,2018-01-31,completed\r\n30,69,2018-02-02,completed\r\n31,16,2018-02-02,completed\r\n32,28,2018-02-04,completed\r\n33,42,2018-02-04,completed\r\n34,38,2018-02-06,completed\r\n35,80,2018-02-08,completed\r\n36,85,2018-02-10,completed\r\n37,1,2018-02-10,completed\r\n38,51,2018-02-10,completed\r\n39,26,2018-02-11,completed\r\n40,33,2018-02-13,completed\r\n41,99,2018-02-14,completed\r\n42,92,2018-02-16,completed\r\n43,31,2018-02-17,completed\r\n44,66,2018-02-17,completed\r\n45,22,2018-02-17,completed\r\n46,6,2018-02-19,completed\r\n47,50,2018-02-20,completed\r\n48,27,2018-02-21,completed\r\n49,35,2018-02-21,completed\r\n50,51,2018-02-23,completed\r\n51,71,2018-02-24,completed\r\n52,54,2018-02-25,return_pending\r\n53,34,2018-02-26,completed\r\n54,54,2018-02-26,completed\r\n55,18,2018-02-27,completed\r\n56,79,2018-02-28,completed\r\n57,93,2018-03-01,completed\r\n58,22,2018-03-01,completed\r\n59,30,2018-03-02,completed\r\n60,12,2018-03-03,completed\r\n61,63,2018-03-03,completed\r\n62,57,2018-03-05,completed\r\n63,70,2018-03-06,completed\r\n64,13,2018-03-07,completed\r\n65,26,2018-03-08,completed\r\n66,36,2018-03-10,completed\r\n67,79,2018-03-11,completed\r\n68,53,2018-03-11,completed\r\n69,3,2018-03-11,completed\r\n70,8,2018-03-12,completed\r\n71,42,2018-03-12,shipped\r\n72,30,2018-03-14,shipped\r\n73,19,2018-03-16,completed\r\n74,9,2018-03-17,shipped\r\n75,69,2018-03-18,completed\r\n76,25,2018-03-20,completed\r\n77,35,2018-03-21,shipped\r\n78,90,2018-03-23,shipped\r\n79,52,2018-03-23,shipped\r\n80,11,2018-03-23,shipped\r\n81,76,2018-03-23,shipped\r\n82,46,2018-03-24,shipped\r\n83,54,2018-03-24,shipped\r\n84,70,2018-03-26,placed\r\n85,47,2018-03-26,shipped\r\n86,68,2018-03-26,placed\r\n87,46,2018-03-27,placed\r\n88,91,2018-03-27,shipped\r\n89,21,2018-03-28,placed\r\n90,66,2018-03-30,shipped\r\n91,47,2018-03-31,placed\r\n92,84,2018-04-02,placed\r\n93,66,2018-04-03,placed\r\n94,63,2018-04-03,placed\r\n95,27,2018-04-04,placed\r\n96,90,2018-04-06,placed\r\n97,89,2018-04-07,placed\r\n98,41,2018-04-07,placed\r\n99,85,2018-04-09,placed\r\n",
                    "binary": false
                }
            },
            ".gitignore": {
                "name": ".gitignore",
                "content": "\ntarget/\ndbt_modules/\nlogs/\n**/.DS_Store\n",
                "binary": false
            },
            "dbt_project.yml": {
                "name": "dbt_project.yml",
                "content": "name: 'jaffle_shop'\n\nconfig-version: 2\nversion: '0.1'\n\nprofile: 'jaffle_shop'\n\nmodel-paths: [\"models\"]\nseed-paths: [\"seeds\"]\ntest-paths: [\"tests\"]\nanalysis-paths: [\"analysis\"]\nmacro-paths: [\"macros\"]\n\ntarget-path: \"target\"\nclean-targets:\n    - \"target\"\n    - \"dbt_modules\"\n    - \"logs\"\n\nrequire-dbt-version: [\">=1.0.0\", \"<2.0.0\"]\n\nmodels:\n  jaffle_shop:\n      materialized: table\n      staging:\n        materialized: view\n",
                "binary": false
            },
            ".git": {
                "hooks": {
                    "commit-msg.sample": {
                        "name": "commit-msg.sample",
                        "content": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n# commit.  The hook is allowed to edit the commit message file.\n#\n# To enable this hook, rename this file to \"commit-msg\".\n\n# Uncomment the below to add a Signed-off-by line to the message.\n# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                        "binary": false
                    },
                    "pre-commit.sample": {
                        "name": "pre-commit.sample",
                        "content": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n# If you want to allow non-ASCII filenames set this variable to true.\nallownonascii=$(git config --type=bool hooks.allownonascii)\n\n# Redirect output to stderr.\nexec 1>&2\n\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n\nTo be portable it is advisable to rename the file.\n\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                        "binary": false
                    },
                    "pre-rebase.sample": {
                        "name": "pre-rebase.sample",
                        "content": "#!/bin/sh\n#\n# Copyright (c) 2006, 2008 Junio C Hamano\n#\n# The \"pre-rebase\" hook is run just before \"git rebase\" starts doing\n# its job, and can prevent the command from running by exiting with\n# non-zero status.\n#\n# The hook is called with the following parameters:\n#\n# $1 -- the upstream the series was forked from.\n# $2 -- the branch being rebased (or empty when rebasing the current branch).\n#\n# This sample shows how to prevent topic branches that are already\n# merged to 'next' branch from getting rebased, because allowing it\n# would result in rebasing already published history.\n\npublish=next\nbasebranch=\"$1\"\nif test \"$#\" = 2\nthen\n\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n\t;;\n*)\n\texit 0 ;# we do not interrupt others.\n\t;;\nesac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n\n# Is topic fully merged to master?\nnot_in_master=`git rev-list --pretty=oneline ^master \"$topic\"`\nif test -z \"$not_in_master\"\nthen\n\techo >&2 \"$topic is fully merged to master; better remove it.\"\n\texit 1 ;# we could allow it, but there is no point.\nfi\n\n# Is topic ever merged to next?  If so you should not be rebasing it.\nonly_next_1=`git rev-list ^master \"^$topic\" ${publish} | sort`\nonly_next_2=`git rev-list ^master           ${publish} | sort`\nif test \"$only_next_1\" = \"$only_next_2\"\nthen\n\tnot_in_topic=`git rev-list \"^$topic\" master`\n\tif test -z \"$not_in_topic\"\n\tthen\n\t\techo >&2 \"$topic is already up to date with master\"\n\t\texit 1 ;# we could allow it, but there is no point.\n\telse\n\t\texit 0\n\tfi\nelse\n\tnot_in_next=`git rev-list --pretty=oneline ^${publish} \"$topic\"`\n\t/usr/bin/perl -e '\n\t\tmy $topic = $ARGV[0];\n\t\tmy $msg = \"* $topic has commits already merged to public branch:\\n\";\n\t\tmy (%not_in_next) = map {\n\t\t\t/^([0-9a-f]+) /;\n\t\t\t($1 => 1);\n\t\t} split(/\\n/, $ARGV[1]);\n\t\tfor my $elem (map {\n\t\t\t\t/^([0-9a-f]+) (.*)$/;\n\t\t\t\t[$1 => $2];\n\t\t\t} split(/\\n/, $ARGV[2])) {\n\t\t\tif (!exists $not_in_next{$elem->[0]}) {\n\t\t\t\tif ($msg) {\n\t\t\t\t\tprint STDERR $msg;\n\t\t\t\t\tundef $msg;\n\t\t\t\t}\n\t\t\t\tprint STDERR \" $elem->[1]\\n\";\n\t\t\t}\n\t\t}\n\t' \"$topic\" \"$not_in_next\" \"$not_in_master\"\n\texit 1\nfi\n\n<<\\DOC_END\n\nThis sample hook safeguards topic branches that have been\npublished from being rewound.\n\nThe workflow assumed here is:\n\n * Once a topic branch forks from \"master\", \"master\" is never\n   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n   branches, merge them into \"next\" branch.\n\nThe script, being an example, hardcodes the publish branch name\nto be \"next\", but it is trivial to make it configurable via\n$GIT_DIR/config mechanism.\n\nWith this workflow, you would want to know:\n\n(1) ... if a topic branch has ever been merged to \"next\".  Young\n    topic branches can have stupid mistakes you would rather\n    clean up before publishing, and things that have not been\n    merged into other branches can be easily rebased without\n    affecting other people.  But once it is published, you would\n    not want to rewind it.\n\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n\t\t /   a---a---b A     /           /\n\t\t/   /               /           /\n\t       /   /   c---c---c---c B         /\n\t      /   /   /             \\         /\n\t     /   /   /   b---b C     \\       /\n\t    /   /   /   /             \\     /\n    ---o---o---o---o---o---o---o---o---o---o---o \"master\"\n\n\nA, B and C are topic branches.\n\n * A has one fix since it was merged up to \"next\".\n\n * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\nDOC_END\n",
                        "binary": false
                    },
                    "fsmonitor-watchman.sample": {
                        "name": "fsmonitor-watchman.sample",
                        "content": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n# 'git config core.fsmonitor .git/hooks/query-watchman'\n#\nmy ($version, $last_update_token) = @ARGV;\n\n# Uncomment for debugging\n# print STDERR \"$0 $version $last_update_token\\n\";\n\n# Check the hook interface version\nif ($version ne 2) {\n\tdie \"Unsupported query-fsmonitor hook version '$version'.\\n\" .\n\t    \"Falling back to scanning...\\n\";\n}\n\nmy $git_work_tree = get_working_dir();\n\nmy $retry = 1;\n\nmy $json_pkg;\neval {\n\trequire JSON::XS;\n\t$json_pkg = \"JSON::XS\";\n\t1;\n} or do {\n\trequire JSON::PP;\n\t$json_pkg = \"JSON::PP\";\n};\n\nlaunch_watchman();\n\nsub launch_watchman {\n\tmy $o = watchman_query();\n\tif (is_work_tree_watched($o)) {\n\t\toutput_result($o->{clock}, @{$o->{files}});\n\t}\n}\n\nsub output_result {\n\tmy ($clockid, @files) = @_;\n\n\t# Uncomment for debugging watchman output\n\t# open (my $fh, \">\", \".git/watchman-output.out\");\n\t# binmode $fh, \":utf8\";\n\t# print $fh \"$clockid\\n@files\\n\";\n\t# close $fh;\n\n\tbinmode STDOUT, \":utf8\";\n\tprint $clockid;\n\tprint \"\\0\";\n\tlocal $, = \"\\0\";\n\tprint @files;\n}\n\nsub watchman_clock {\n\tmy $response = qx/watchman clock \"$git_work_tree\"/;\n\tdie \"Failed to get clock id on '$git_work_tree'.\\n\" .\n\t\t\"Falling back to scanning...\\n\" if $? != 0;\n\n\treturn $json_pkg->new->utf8->decode($response);\n}\n\nsub watchman_query {\n\tmy $pid = open2(\\*CHLD_OUT, \\*CHLD_IN, 'watchman -j --no-pretty')\n\tor die \"open2() failed: $!\\n\" .\n\t\"Falling back to scanning...\\n\";\n\n\t# In the query expression below we're asking for names of files that\n\t# changed since $last_update_token but not from the .git folder.\n\t#\n\t# To accomplish this, we're using the \"since\" generator to use the\n\t# recency index to select candidate nodes and \"fields\" to limit the\n\t# output to file names only. Then we're using the \"expression\" term to\n\t# further constrain the results.\n\tmy $last_update_line = \"\";\n\tif (substr($last_update_token, 0, 1) eq \"c\") {\n\t\t$last_update_token = \"\\\"$last_update_token\\\"\";\n\t\t$last_update_line = qq[\\n\"since\": $last_update_token,];\n\t}\n\tmy $query = <<\"\tEND\";\n\t\t[\"query\", \"$git_work_tree\", {$last_update_line\n\t\t\t\"fields\": [\"name\"],\n\t\t\t\"expression\": [\"not\", [\"dirname\", \".git\"]]\n\t\t}]\n\tEND\n\n\t# Uncomment for debugging the watchman query\n\t# open (my $fh, \">\", \".git/watchman-query.json\");\n\t# print $fh $query;\n\t# close $fh;\n\n\tprint CHLD_IN $query;\n\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n\n\tdie \"Watchman: command returned no output.\\n\" .\n\t\"Falling back to scanning...\\n\" if $response eq \"\";\n\tdie \"Watchman: command returned invalid output: $response\\n\" .\n\t\"Falling back to scanning...\\n\" unless $response =~ /^\\{/;\n\n\treturn $json_pkg->new->utf8->decode($response);\n}\n\nsub is_work_tree_watched {\n\tmy ($output) = @_;\n\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n\t\tdie \"Watchman: $error.\\n\" .\n\t\t\"Falling back to scanning...\\n\" if $error;\n\n\t\t# Uncomment for debugging watchman output\n\t\t# open (my $fh, \">\", \".git/watchman-output.out\");\n\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n\t\tdie \"Watchman: $error.\\n\" .\n\t\t\"Falling back to scanning...\\n\" if $error;\n\n\t\toutput_result($o->{clock}, (\"/\"));\n\t\t$last_update_token = $o->{clock};\n\n\t\teval { launch_watchman() };\n\t\treturn 0;\n\t}\n\n\tdie \"Watchman: $error.\\n\" .\n\t\"Falling back to scanning...\\n\" if $error;\n\n\treturn 1;\n}\n\nsub get_working_dir {\n\tmy $working_dir;\n\tif ($^O =~ 'msys' || $^O =~ 'cygwin') {\n\t\t$working_dir = Win32::GetCwd();\n\t\t$working_dir =~ tr/\\\/\//;\n\t} else {\n\t\trequire Cwd;\n\t\t$working_dir = Cwd::cwd();\n\t}\n\n\treturn $working_dir;\n}\n",
                        "binary": false
                    },
                    "pre-receive.sample": {
                        "name": "pre-receive.sample",
                        "content": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n# To enable this hook, rename this file to \"pre-receive\".\n\nif test -n \"$GIT_PUSH_OPTION_COUNT\"\nthen\n\ti=0\n\twhile test \"$i\" -lt \"$GIT_PUSH_OPTION_COUNT\"\n\tdo\n\t\teval \"value=\\$GIT_PUSH_OPTION_$i\"\n\t\tcase \"$value\" in\n\t\techoback=*)\n\t\t\techo \"echo from the pre-receive-hook: ${value#*=}\" >&2\n\t\t\t;;\n\t\treject)\n\t\t\texit 1\n\t\tesac\n\t\ti=$((i + 1))\n\tdone\nfi\n",
                        "binary": false
                    },
                    "push-to-checkout.sample": {
                        "name": "push-to-checkout.sample",
                        "content": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n# By default, such a push is refused if the working tree and the index\n# of the remote repository has any difference from the currently\n# checked out commit; when both the working tree and the index match\n# the current commit, they are updated to match the newly pushed tip\n# of the branch. This hook is to be used to override the default\n# behaviour; however the code below reimplements the default behaviour\n# as a starting point for convenient modification.\n#\n# The hook receives the commit with which the tip of the current\n# branch is going to be updated:\ncommit=$1\n\n# It can exit with a non-zero status to refuse the push (when it does\n# so, it must not modify the index or the working tree).\ndie () {\n\techo >&2 \"$*\"\n\texit 1\n}\n\n# Or it can make any necessary changes to the working tree and to the\n# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n# The below is a more-or-less exact translation to shell of the C code\n# for the default behaviour for git's push-to-checkout hook defined in\n# the push_to_deploy() function in builtin/receive-pack.c.\n#\n# Note that the hook will be executed from the repository directory,\n# not from the working tree, so if you want to perform operations on\n# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n\n# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                        "binary": false
                    },
                    "pre-applypatch.sample": {
                        "name": "pre-applypatch.sample",
                        "content": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n# appropriate message if it wants to stop the commit.\n#\n# To enable this hook, rename this file to \"pre-applypatch\".\n\n. git-sh-setup\nprecommit=\"$(git rev-parse --git-path hooks/pre-commit)\"\ntest -x \"$precommit\" && exec \"$precommit\" ${1+\"$@\"}\n:\n",
                        "binary": false
                    },
                    "prepare-commit-msg.sample": {
                        "name": "prepare-commit-msg.sample",
                        "content": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n# message file.  If the hook fails with a non-zero status,\n# the commit is aborted.\n#\n# To enable this hook, rename this file to \"prepare-commit-msg\".\n\n# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n#\n# The third example adds a Signed-off-by line to the message, that can\n# still be edited.  This is rarely a good idea.\n\nCOMMIT_MSG_FILE=$1\nCOMMIT_SOURCE=$2\nSHA1=$3\n\n/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' \"$COMMIT_MSG_FILE\"\n\n# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n# fi\n",
                        "binary": false
                    },
                    "post-update.sample": {
                        "name": "post-update.sample",
                        "content": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                        "binary": false
                    },
                    "pre-push.sample": {
                        "name": "pre-push.sample",
                        "content": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n# $1 -- Name of the remote to which the push is being done\n# $2 -- URL to which the push is being done\n#\n# If pushing without using a named remote those arguments will be equal.\n#\n# Information about the commits which are being pushed is supplied as lines to\n# the standard input in the form:\n#\n#   <local ref> <local oid> <remote ref> <remote oid>\n#\n# This sample shows how to prevent push of commits where the log message starts\n# with \"WIP\" (work in progress).\n\nremote=\"$1\"\nurl=\"$2\"\n\nzero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')\n\nwhile read local_ref local_oid remote_ref remote_oid\ndo\n\tif test \"$local_oid\" = \"$zero\"\n\tthen\n\t\t# Handle delete\n\t\t:\n\telse\n\t\tif test \"$remote_oid\" = \"$zero\"\n\t\tthen\n\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n\t\t# Check for WIP commit\n\t\tcommit=$(git rev-list -n 1 --grep '^WIP' \"$range\")\n\t\tif test -n \"$commit\"\n\t\tthen\n\t\t\techo >&2 \"Found WIP commit in $local_ref, not pushing\"\n\t\t\texit 1\n\t\tfi\n\tfi\ndone\n\nexit 0\n",
                        "binary": false
                    },
                    "update.sample": {
                        "name": "update.sample",
                        "content": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n#\n# Config\n# ------\n# hooks.allowunannotated\n#   This boolean sets whether unannotated tags will be allowed into the\n#   repository.  By default they won't be.\n# hooks.allowdeletetag\n#   This boolean sets whether deleting tags will be allowed in the\n#   repository.  By default they won't be.\n# hooks.allowmodifytag\n#   This boolean sets whether a tag may be modified after creation. By default\n#   it won't be.\n# hooks.allowdeletebranch\n#   This boolean sets whether deleting branches will be allowed in the\n#   repository.  By default they won't be.\n# hooks.denycreatebranch\n#   This boolean sets whether remotely creating branches will be denied\n#   in the repository.  By default this is allowed.\n#\n\n# --- Command line\nrefname=\"$1\"\noldrev=\"$2\"\nnewrev=\"$3\"\n\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\nfi\n\nif [ -z \"$refname\" -o -z \"$oldrev\" -o -z \"$newrev\" ]; then\n\techo \"usage: $0 <ref> <oldrev> <newrev>\" >&2\n\texit 1\nfi\n\n# --- Config\nallowunannotated=$(git config --type=bool hooks.allowunannotated)\nallowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)\ndenycreatebranch=$(git config --type=bool hooks.denycreatebranch)\nallowdeletetag=$(git config --type=bool hooks.allowdeletetag)\nallowmodifytag=$(git config --type=bool hooks.allowmodifytag)\n\n# check for no description\nprojectdesc=$(sed -e '1q' \"$GIT_DIR/description\")\ncase \"$projectdesc\" in\n\"Unnamed repository\"* | \"\")\n\techo \"*** Project description file hasn't been set\" >&2\n\texit 1\n\t;;\nesac\n\n# --- Check types\n# if $newrev is 0000...0000, it's a commit to delete a ref.\nzero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')\nif [ \"$newrev\" = \"$zero\" ]; then\n\tnewrev_type=delete\nelse\n\tnewrev_type=$(git cat-file -t $newrev)\nfi\n\ncase \"$refname\",\"$newrev_type\" in\n\trefs/tags/*,commit)\n\t\t# un-annotated tag\n\t\tshort_refname=${refname##refs/tags/}\n\t\tif [ \"$allowunannotated\" != \"true\" ]; then\n\t\t\techo \"*** The un-annotated tag, $short_refname, is not allowed in this repository\" >&2\n\t\t\techo \"*** Use 'git tag [ -a | -s ]' for tags you want to propagate.\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\trefs/tags/*,delete)\n\t\t# delete tag\n\t\tif [ \"$allowdeletetag\" != \"true\" ]; then\n\t\t\techo \"*** Deleting a tag is not allowed in this repository\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\trefs/heads/*,commit)\n\t\t# branch\n\t\tif [ \"$oldrev\" = \"$zero\" -a \"$denycreatebranch\" = \"true\" ]; then\n\t\t\techo \"*** Creating a branch is not allowed in this repository\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\trefs/heads/*,delete)\n\t\t# delete branch\n\t\tif [ \"$allowdeletebranch\" != \"true\" ]; then\n\t\t\techo \"*** Deleting a branch is not allowed in this repository\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\trefs/remotes/*,commit)\n\t\t# tracking branch\n\t\t;;\n\trefs/remotes/*,delete)\n\t\t# delete tracking branch\n\t\tif [ \"$allowdeletebranch\" != \"true\" ]; then\n\t\t\techo \"*** Deleting a tracking branch is not allowed in this repository\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n\n# --- Finished\nexit 0\n",
                        "binary": false
                    },
                    "pre-merge-commit.sample": {
                        "name": "pre-merge-commit.sample",
                        "content": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n#\n# To enable this hook, rename this file to \"pre-merge-commit\".\n\n. git-sh-setup\ntest -x \"$GIT_DIR/hooks/pre-commit\" &&\n        exec \"$GIT_DIR/hooks/pre-commit\"\n:\n",
                        "binary": false
                    },
                    "applypatch-msg.sample": {
                        "name": "applypatch-msg.sample",
                        "content": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n# appropriate message if it wants to stop the commit.  The hook is\n# allowed to edit the commit message file.\n#\n# To enable this hook, rename this file to \"applypatch-msg\".\n\n. git-sh-setup\ncommitmsg=\"$(git rev-parse --git-path hooks/commit-msg)\"\ntest -x \"$commitmsg\" && exec \"$commitmsg\" ${1+\"$@\"}\n:\n",
                        "binary": false
                    }
                },
                "objects": {
                    "info": {},
                    "pack": {
                        "pack-e69205f4084227898f795a4ba84b8ef92453223b.pack": {
                            "name": "pack-e69205f4084227898f795a4ba84b8ef92453223b.pack",
                            "content": "",
                            "binary": true
                        },
                        "pack-e69205f4084227898f795a4ba84b8ef92453223b.idx": {
                            "name": "pack-e69205f4084227898f795a4ba84b8ef92453223b.idx",
                            "content": "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",
                            "binary": true
                        }
                    }
                },
                "index": {
                    "name": "index",
                    "content": "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",
                    "binary": true
                },
                "packed-refs": {
                    "name": "packed-refs",
                    "content": "# pack-refs with: peeled fully-peeled sorted \n24af64f24de7e691185ed09933137460b6fbc685 refs/remotes/origin/main\n",
                    "binary": false
                },
                "logs": {
                    "refs": {
                        "heads": {
                            "main": {
                                "name": "main",
                                "content": "0000000000000000000000000000000000000000 24af64f24de7e691185ed09933137460b6fbc685 lexara-prime-ai <irfanghat@gmail.com> 1733475868 +0000\tclone: from https://github.com/Embra-Connect-ETL/SAMPLE_DBT_PROJECT.git\n",
                                "binary": false
                            }
                        },
                        "remotes": {
                            "origin": {
                                "HEAD": {
                                    "name": "HEAD",
                                    "content": "0000000000000000000000000000000000000000 24af64f24de7e691185ed09933137460b6fbc685 lexara-prime-ai <irfanghat@gmail.com> 1733475868 +0000\tclone: from https://github.com/Embra-Connect-ETL/SAMPLE_DBT_PROJECT.git\n",
                                    "binary": false
                                }
                            }
                        }
                    },
                    "HEAD": {
                        "name": "HEAD",
                        "content": "0000000000000000000000000000000000000000 24af64f24de7e691185ed09933137460b6fbc685 lexara-prime-ai <irfanghat@gmail.com> 1733475868 +0000\tclone: from https://github.com/Embra-Connect-ETL/SAMPLE_DBT_PROJECT.git\n",
                        "binary": false
                    }
                },
                "info": {
                    "exclude": {
                        "name": "exclude",
                        "content": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n# *.[oa]\n# *~\n",
                        "binary": false
                    }
                },
                "HEAD": {
                    "name": "HEAD",
                    "content": "ref: refs/heads/main\n",
                    "binary": false
                },
                "config": {
                    "name": "config",
                    "content": "[core]\n\trepositoryformatversion = 0\n\tfilemode = true\n\tbare = false\n\tlogallrefupdates = true\n[remote \"origin\"]\n\turl = https://github.com/Embra-Connect-ETL/SAMPLE_DBT_PROJECT.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"main\"]\n\tremote = origin\n\tmerge = refs/heads/main\n",
                    "binary": false
                },
                "description": {
                    "name": "description",
                    "content": "Unnamed repository; edit this file 'description' to name the repository.\n",
                    "binary": false
                },
                "branches": {},
                "refs": {
                    "heads": {
                        "main": {
                            "name": "main",
                            "content": "24af64f24de7e691185ed09933137460b6fbc685\n",
                            "binary": false
                        }
                    },
                    "remotes": {
                        "origin": {
                            "HEAD": {
                                "name": "HEAD",
                                "content": "ref: refs/remotes/origin/main\n",
                                "binary": false
                            }
                        }
                    },
                    "tags": {}
                }
            },
            "README.md": {
                "name": "README.md",
                "content": "## Testing dbt project: `jaffle_shop`\n\n`jaffle_shop` is a fictional ecommerce store. This dbt project transforms raw data from an app database into a customers and orders model ready for analytics.\n\n### What is this repo?\nWhat this repo _is_:\n- A self-contained playground dbt project, useful for testing out scripts, and communicating some of the core dbt concepts.\n\nWhat this repo _is not_:\n- A tutorial — check out the [Getting Started Tutorial](https://docs.getdbt.com/tutorial/setting-up) for that. Notably, this repo contains some anti-patterns to make it self-contained, namely the use of seeds instead of sources.\n- A demonstration of best practices — check out the [dbt Learn Demo](https://github.com/dbt-labs/dbt-learn-demo) repo instead. We want to keep this project as simple as possible. As such, we chose not to implement:\n    - our standard file naming patterns (which make more sense on larger projects, rather than this five-model project)\n    - a pull request flow\n    - CI/CD integrations\n- A demonstration of using dbt for a high-complex project, or a demo of advanced features (e.g. macros, packages, hooks, operations) — we're just trying to keep things simple here!\n\n### What's in this repo?\nThis repo contains [seeds](https://docs.getdbt.com/docs/building-a-dbt-project/seeds) that includes some (fake) raw data from a fictional app.\n\nThe raw data consists of customers, orders, and payments, with the following entity-relationship diagram:\n\n![Jaffle Shop ERD](/etc/jaffle_shop_erd.png)\n\n\n### Running this project\nTo get up and running with this project:\n1. Install dbt using [these instructions](https://docs.getdbt.com/docs/installation).\n\n2. Clone this repository.\n\n3. Change into the `jaffle_shop` directory from the command line:\n```bash\n$ cd jaffle_shop\n```\n\n4. Set up a profile called `jaffle_shop` to connect to a data warehouse by following [these instructions](https://docs.getdbt.com/docs/configure-your-profile). If you have access to a data warehouse, you can use those credentials – we recommend setting your [target schema](https://docs.getdbt.com/docs/configure-your-profile#section-populating-your-profile) to be a new schema (dbt will create the schema for you, as long as you have the right privileges). If you don't have access to an existing data warehouse, you can also setup a local postgres database and connect to it in your profile.\n\n5. Ensure your profile is setup correctly from the command line:\n```bash\n$ dbt debug\n```\n\n6. Load the CSVs with the demo data set. This materializes the CSVs as tables in your target schema. \nNote that a typical dbt project **does not require this step** since dbt assumes your raw data is already in your warehouse.\n```bash\n$ dbt seed\n```\n\n7. Run the models:\n```bash\n$ dbt run\n```\n\n> **NOTE:** If this steps fails, it might mean that you need to make small changes to the SQL in the models folder to adjust for the flavor of SQL of your target database. Definitely consider this if you are using a community-contributed adapter.\n\n8. Test the output of the models:\n```bash\n$ dbt test\n```\n\n9. Generate documentation for the project:\n```bash\n$ dbt docs generate\n```\n\n10. View the documentation for the project:\n```bash\n$ dbt docs serve\n```\n\n### What is a jaffle?\nA jaffle is a toasted sandwich with crimped, sealed edges. Invented in Bondi in 1949, the humble jaffle is an Australian classic. The sealed edges allow jaffle-eaters to enjoy liquid fillings inside the sandwich, which reach temperatures close to the core of the earth during cooking. Often consumed at home after a night out, the most classic filling is tinned spaghetti, while my personal favourite is leftover beef stew with melted cheese.\n\n---\nFor more information on dbt:\n- Read the [introduction to dbt](https://docs.getdbt.com/docs/introduction).\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/about/viewpoint).\n- Join the [dbt community](http://community.getdbt.com/).\n---\n",
                "binary": false
            },
            "LICENSE": {
                "name": "LICENSE",
                "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "binary": false
            },
            "etc": {
                "db_diagram_definition.txt": {
                    "name": "db_diagram_definition.txt",
                    "content": "Table orders {\n  id int PK\n  user_id int\n  order_date date\n  status varchar\n}\n\nTable payments {\n  id int\n  order_id int\n  payment_method int\n  amount int\n}\n\nTable customers {\n  id int PK\n  first_name varchar\n  last_name varchar\n}\n\nRef: orders.user_id > customers.id\n\nRef: payments.order_id > orders.id\n",
                    "binary": false
                },
                "jaffle_shop_erd.png": {
                    "name": "jaffle_shop_erd.png",
                    "content": "",
                    "binary": true
                }
            },
            "models": {
                "docs.md": {
                    "name": "docs.md",
                    "content": "{% docs orders_status %}\n\nOrders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |\n\n\n{% enddocs %}\n",
                    "binary": false
                },
                "overview.md": {
                    "name": "overview.md",
                    "content": "{% docs __overview__ %}\n\n## Data Documentation for Jaffle Shop\n\n`jaffle_shop` is a fictional ecommerce store.\n\nThis [dbt](https://www.getdbt.com/) project is for testing out code.\n\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop).\n\n{% enddocs %}\n",
                    "binary": false
                },
                "schema.yml": {
                    "name": "schema.yml",
                    "content": "version: 2\n\nmodels:\n  - name: customers\n    description: This table has basic information about a customer, as well as some derived facts based on a customer's orders\n\n    columns:\n      - name: customer_id\n        description: This is a unique identifier for a customer\n        tests:\n          - unique\n          - not_null\n\n      - name: first_name\n        description: Customer's first name. PII.\n\n      - name: last_name\n        description: Customer's last name. PII.\n\n      - name: first_order\n        description: Date (UTC) of a customer's first order\n\n      - name: most_recent_order\n        description: Date (UTC) of a customer's most recent order\n\n      - name: number_of_orders\n        description: Count of the number of orders a customer has placed\n\n      - name: total_order_amount\n        description: Total value (AUD) of a customer's orders\n\n  - name: orders\n    description: This table has basic information about orders, as well as some derived facts based on payments\n\n    columns:\n      - name: order_id\n        tests:\n          - unique\n          - not_null\n        description: This is a unique identifier for an order\n\n      - name: customer_id\n        description: Foreign key to the customers table\n        tests:\n          - not_null\n          - relationships:\n              to: ref('customers')\n              field: customer_id\n\n      - name: order_date\n        description: Date (UTC) that the order was placed\n\n      - name: status\n        description: '{{ doc(\"orders_status\") }}'\n        tests:\n          - accepted_values:\n              values: ['placed', 'shipped', 'completed', 'return_pending', 'returned']\n\n      - name: amount\n        description: Total amount (AUD) of the order\n        tests:\n          - not_null\n\n      - name: credit_card_amount\n        description: Amount of the order (AUD) paid for by credit card\n        tests:\n          - not_null\n\n      - name: coupon_amount\n        description: Amount of the order (AUD) paid for by coupon\n        tests:\n          - not_null\n\n      - name: bank_transfer_amount\n        description: Amount of the order (AUD) paid for by bank transfer\n        tests:\n          - not_null\n\n      - name: gift_card_amount\n        description: Amount of the order (AUD) paid for by gift card\n        tests:\n          - not_null\n",
                    "binary": false
                },
                "customers.sql": {
                    "name": "customers.sql",
                    "content": "with customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final\n",
                    "binary": false
                },
                "staging": {
                    "stg_orders.sql": {
                        "name": "stg_orders.sql",
                        "content": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_orders') }}\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed\n",
                        "binary": false
                    },
                    "schema.yml": {
                        "name": "schema.yml",
                        "content": "version: 2\n\nmodels:\n  - name: stg_customers\n    columns:\n      - name: customer_id\n        tests:\n          - unique\n          - not_null\n\n  - name: stg_orders\n    columns:\n      - name: order_id\n        tests:\n          - unique\n          - not_null\n      - name: status\n        tests:\n          - accepted_values:\n              values: ['placed', 'shipped', 'completed', 'return_pending', 'returned']\n\n  - name: stg_payments\n    columns:\n      - name: payment_id\n        tests:\n          - unique\n          - not_null\n      - name: payment_method\n        tests:\n          - accepted_values:\n              values: ['credit_card', 'coupon', 'bank_transfer', 'gift_card']\n",
                        "binary": false
                    },
                    "stg_customers.sql": {
                        "name": "stg_customers.sql",
                        "content": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_customers') }}\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed\n",
                        "binary": false
                    },
                    "stg_payments.sql": {
                        "name": "stg_payments.sql",
                        "content": "with source as (\n    \n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_payments') }}\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed\n",
                        "binary": false
                    }
                },
                "orders.sql": {
                    "name": "orders.sql",
                    "content": "{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        {% for payment_method in payment_methods -%}\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end) as {{ payment_method }}_amount,\n        {% endfor -%}\n\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        {% for payment_method in payment_methods -%}\n\n        order_payments.{{ payment_method }}_amount,\n\n        {% endfor -%}\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final\n",
                    "binary": false
                }
            }
        }
    }
}